################################################################################
#                      OVERALL STATISTICS WITHOUT EDGE PREDICTION             #
################################################################################
  Snippets evaluated: 1000
  Total masked tokens: 14503
--------------------------------------------------------------------------------
  Overall Top-1 Accuracy: 74.58% (10817/14503)
  Overall Top-5 Accuracy: 86.11% (12488/14503)
  Overall Perplexity:     26.7652
################################################################################
################################################################################
#                      OVERALL STATISTICS WITH EDGE PREDICTION             #
################################################################################
Train - Total: 1.5143, MLM: 1.0901, Edge: 0.4242
Val   - Total: 1.2411, MLM: 0.8293, Edge: 0.4118
New best model! Saving to graphcodebert-cpp-mlm-from-config/best_model

  Snippets evaluated: 1000
  Total masked tokens: 14503
--------------------------------------------------------------------------------
  Overall Top-1 Accuracy: 76.96% (11161/14503)
  Overall Top-5 Accuracy: 87.50% (12690/14503)
  Overall Perplexity:     19.2771


################################################################################

{
  "train": {
    "data_file": "data/cpp_functions.jsonl",
    "output_dir": "graphcodebert-cpp-mlm-from-config",
    "batch_size": 1,
    "epochs": 1,
    "learning_rate": 5e-5,
    "max_length": 128,
    "warmup_steps": 10,
    "mlm_probability": 0.15,
    "validation_split": 0.15
  },
  "evaluate": {
    "model_path": "graphcodebert-cpp-mlm-from-config/best_model",
    "mask_ratio": 0.2,
    "top_k": 5,
    "use_database_snippets": true,
    "training_data_size": 10000,
    "num_database_snippets": 1000
  }
}
#####################   CODE SNIPPET    ######################################
#include <type_traits>
#include <iostream>

template <typename T>
constexpr auto cpp_magic(T&& x) noexcept {
    if constexpr (std::is_integral_v<std::decay_t<T>>) {
        return x * x; // squares integers
    } else if constexpr (std::is_floating_point_v<std::decay_t<T>>) {
        return x / 2.0; // halves floats
    } else {
        static_assert(std::is_same_v<T, void>, "Unsupported type!");
    }
}

int main() {
    std::cout << cpp_magic(5) << '\n';     // 25
    std::cout << cpp_magic(3.14) << '\n';  // 1.57
}
################################################################################
################################################################################
#                    SUMMARY: Random Masking (50%)                   #
################################################################################
  Total masked tokens: 121
--------------------------------------------------------------------------------
  Top-1 Accuracy: 59.50% (72/121)
  Top-5 Accuracy: 82.64% (100/121)
  Perplexity:     94.1897
################################################################################
################################################################################
#                    SUMMARY: Sequential Masking                     #
################################################################################
  Total masked tokens: 242
--------------------------------------------------------------------------------
  Top-1 Accuracy: 88.02% (213/242)
  Top-5 Accuracy: 93.80% (227/242)
  Perplexity:     4.3559
################################################################################
################################################################################
#                    SUMMARY: Specific Token Masking (x)        #
################################################################################
  Total masked tokens: 4
--------------------------------------------------------------------------------
  Top-1 Accuracy: 25.00% (1/4)
  Top-5 Accuracy: 75.00% (3/4)
  Perplexity:     1003.2313
################################################################################